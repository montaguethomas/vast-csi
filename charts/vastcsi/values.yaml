####################
# VAST REST SESSION ATTRIBUTES
####################
# Credentials to login - must be provided by user
username: ""
password: ""
# API endpoint of VAST appliance - must be provided by user
endpoint: ""

# Set true to enable certificate validity test
verifySsl: false

# Path (absolute or relative) to root CA certificate. - must be set using `set-file` option eg `--set-file sslCert=VastCerts/sslCert.crt`
sslCert: ""

####################
# DELETE VOLUMES
####################
# Dedicated vip pool to delete volumes. Can have the same value as regular StorageClass option `vipPool`
# - must be provided by user
deletionVipPool: ""
# Dedicated view policy to delete volumes. Can have the same value as regular StorageClass option `viewPolicy`
# - must be provided by user
deletionViewPolicy: ""

####################
# VAST CSI STORAGE CLASS OPTIONS
####################
# storageClassDefaults is set of options that will be using by default if option is not provided
# for particular storageClass in 'storageClasses' section
storageClassDefaults:
  # Where volumes will be located on VAST - must be provided by user
  storagePath: ""
  # Name of VAST VIP pool to use - must be provided by user
  vipPool: ""
  # VAST policy name to create views - must be provided by user
  viewPolicy: ""
  # Allows resizing existing volumes
  allowVolumeExpansion: true
  # Load-balancing strategy
  # Options:
  #   roundrobin, random
  lbStrategy: roundrobin
  # If true, sets Vast CSI as the cluster-wide storage class default
  setDefaultStorageClass: false
  # String template for CSI-provisioned volume names, within VAST
  volumeNameFormat: "csi:{namespace}:{name}:{id}"
  # String template for CSI-provisioned ephemeral volumes, within VAST
  ephemeralVolumeNameFormat: "csi:{namespace}:{name}:{id}"
  # Add any extra NFS options desired here
  mountOptions: ""

# Default storage class to use with CSI DRIVER.
# The only required value is 'vipPool' name where user should provide name of existing vip pool on
# VAST cluster.
# User can extend this section using more storage classes with different storage class parameters and options.
storageClasses: {}
  # StorageClass name. This field must be unique across all storage classes.
  # vastdata-filesystem:
    # Name of VAST VIP pool to use - must be provided by user
    # vipPool: ""
    # ... Any other options from 'storageClassDefaults' section. If not provided then default value
    # will be used.
# User can add more storage classes to this section eg:
#  vastdata-filesystem2:
#    vipPool: "vippool-2"
#    .... other options
#
#  vastdata-filesystem3:
#    vipPool: "vippool-3"
#    ....  other options


####################
# VAST CSI SNAPSHOTS CLASS OPTIONS
####################
snapshotClass:
  snapshotClassName: "vastdata-snapshot"
  # On snapshot delete behavior. By default, Vast Cluster snapshot will be removed as well.
  deletionPolicy: "Delete"
  # If true, sets Vast CSI as the cluster-wide snapshot class default
  setDefaultStorageClass: true
  # String template for CSI-provisioned snapshot names, within VAST
  snapshotNameFormat: "csi:{namespace}:{name}:{id}"


####################
# VAST CONTROLLER AND NODE IMAGE SPECIFICATION
####################

# Truncate VAST quota name if name length is greater then this number.
# set `truncateVolumeName: null` to disable truncation.
truncateVolumeName: 64

# Kubernetes image pull policies control when Kubelet should fetch an updated image version.
# Pull policies are used when a new Pod is starting up.
imagePullPolicy: "IfNotPresent"

# csiImage is base docker image for Controller and Node.
csiImage: "vastdataorg/csi"

# csiImageTag represents version of docker image that serves  CSI Controller and CSI Node.
# To check latest stable tag refer https://support.vastdata.com/hc/en-us/articles/360010932159-VAST-with-Kubernetes
csiImageTag: v2.2.0


####################
# VAST CONTROLLER AND NODE BEHAVIOR
#
# WARNING - these parameters are for advanced users.
# Setting these incorrectly may prevent the VAST CSI Driver from running correctly.
#  We recommend to consult with VAST Support before changing any of the following parameters
####################

# nodeSelector is the way to restrict CSI Controller and and CSI Node to be assigned on certain node/nodes.
# Specify node selector if you want node and controller containers to be assigned only to specific node/nodes of
# your cluster.
#  https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector.
nodeSelector: {}

# If specified, the pod's tolerations
# https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
tolerations: []

# affinity is more expressive way to restrict pods to be scheduled on certain nodes that allow you
# to specify percentage of pods that allowed to be sheduled on node etc.
# https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

# podAnnotations is additional key/value metadata you can pass to pods manifest.
podAnnotations: {}

# rbac flag indicated it Role-based access control from this chart should be used to create apropriate
# permissions for CSI Controller and CSI Node. Use default value unless you understand necessary permissions
# and can provide it other way.
rbac: true

# compute resources required by CSI Controller and CSI node
# Example:
# resources:
#   requests:
#      memory: "64Mi"
#      cpu: "250m"
resources: {}

# "Limits describes the maximum amount of compute resource allowed.
# More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
# Example:
# resources:
# requests:
#  limits:
#    memory: "128Mi"
#    cpu: "500m"
limits: {}

# Log level of CSI plugin
logLevel: 5
