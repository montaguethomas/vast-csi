image: docker:latest

variables:
  DOCKER_REGISTRY: ${AWS_ACCOUNT_ID}.dkr.ecr.eu-west-1.amazonaws.com
  IMAGE_NAME: ${AWS_ACCOUNT_ID}.dkr.ecr.eu-west-1.amazonaws.com/dev/vast-csi:${CI_PIPELINE_ID}
  ORION_BRANCH: comet/master

build_csi:
  stage: build
  script: |
    set -x
    VERSION=$(cat version.txt)
    LATEST=${DOCKER_REGISTRY}/dev/vast-csi:latest
    if (docker pull $LATEST) ; then
      docker tag $LATEST vast-csi:latest  # the cache-source for our subsequent build
    fi
    /bin/sh -x packaging/build.sh  # --> vast-csi:dev
    docker tag vast-csi:dev ${IMAGE_NAME}
    docker tag vast-csi:dev ${LATEST}
    docker push ${IMAGE_NAME}
    docker push ${LATEST}
    echo "pushed ${IMAGE_NAME}"
  tags:
    - vast-dev-builder


test_csi [latest]: &test_csi
  stage: test
  when: always
  except:
    - /v[\d]\.[\d]+/
  trigger:
    project: dev/orion
    branch: $ORION_BRANCH
    strategy: depend
  variables:
    INSTALL_IMAGE: latest-4.6.0
    VAST_COMET_KWARG: csi_plugin_version=${CI_PIPELINE_ID}
    UPGRADE_TO: $INSTALL_IMAGE


test_csi:
  <<: *test_csi
  when: manual
  allow_failure: true
  parallel:
    matrix:
      - INSTALL_IMAGE:
        - latest-4-2-0
        - latest-4-3-0
        - latest-4-4-0
        - latest-4.5.0
        - latest-4.6.0


update_dockerhub [prod]: &update_dockerhub
  stage: deploy
  environment: prod
  only:
    - /v[\d]\.[\d]+/
  script: |
    set -x
    VERSION=$(cat version.txt)
    if [[ "$CI_ENVIRONMENT_NAME" != "prod" ]]; then
      VERSION=$VERSION-$CI_ENVIRONMENT_NAME-$CI_PIPELINE_ID
    fi
    RELEASE_NAME=docker.io/vastdataorg/csi:${VERSION}

    docker pull ${IMAGE_NAME}
    docker tag ${IMAGE_NAME} ${RELEASE_NAME}

    echo "Pushing:  ${IMAGE_NAME}  -->  ${RELEASE_NAME}"
    docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} $DOCKER_HUB
    docker push ${RELEASE_NAME}
    echo "pushed ${RELEASE_NAME}"

  after_script:
  - docker logout $DOCKER_HUB
  when: manual
  tags:
    - vast-dev-builder


update_dockerhub [beta]:
  <<: *update_dockerhub
  environment: beta


update_github:
  image:
    name: alpine/git
    entrypoint: [""]
  stage: deploy
  only:
    - /v[\d]\.[\d]+/
  script: |
    set -x
    VERSION=$(cat version.txt)

    mkdir ~/.ssh/
    cp $GITHUB_KEY ~/.ssh/id_rsa
    chmod 0600 ~/.ssh/id_rsa
    ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
    git config --global user.email "ofer.koren@vastdata.com"
    git config --global user.name "Ofer Koren"

    git remote -v
    git remote add github git@github.com:vast-data/vast-csi.git || true
    git fetch github $CI_COMMIT_REF_NAME
    git checkout -B $CI_COMMIT_REF_NAME FETCH_HEAD
    git checkout $CI_COMMIT_SHA -- .
    git commit -am "VAST Data CSI Plugin - $VERSION

      (from $CI_COMMIT_SHA)"

    git tag -f $VERSION
    git push -f --tags github HEAD:$CI_COMMIT_REF_NAME

  only:
  - /^v\d.*/
  when: manual
  tags:
    - vast-dev-builder


mark_stable:
  image: 
    name: amazon/aws-cli
    entrypoint: [""]
  stage: deploy
  script: ./scripts/aws_retag_image.sh ${IMAGE_NAME} stable
  tags:
    - vast-dev-builder
  when: manual
