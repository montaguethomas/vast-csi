image: docker:latest

variables:
  DOCKER_REGISTRY: ${AWS_ACCOUNT_ID}.dkr.ecr.eu-west-1.amazonaws.com
  IMAGE_NAME: ${AWS_ACCOUNT_ID}.dkr.ecr.eu-west-1.amazonaws.com/dev/vast-csi:${CI_PIPELINE_ID}

build_csi:
  stage: build
  script: |
    set -x
    VERSION=$(cat version.txt)
    LATEST=${DOCKER_REGISTRY}/dev/vast-csi:latest
    if (docker pull $LATEST) ; then
      docker tag $LATEST vast-csi:latest  # the cache-source for our subsequent build
    fi
    /bin/sh -x packaging/build.sh  # --> vast-csi:dev
    docker tag vast-csi:dev ${IMAGE_NAME}
    docker tag vast-csi:dev ${LATEST}
    docker push ${IMAGE_NAME}
    docker push ${LATEST}
    echo "pushed ${IMAGE_NAME}"
  tags:
    - vast-dev-builder


.test_csi: &test_csi
  image: $DOCKER_REGISTRY/dev/orion/core_images:utility_docker_ubuntu_17.10-2
  stage: test
  when: manual
  script: |
    set -x

    info=$(./scripts/aws_get_image_info.sh $DOCKER_REGISTRY/dev/orion:latest-$VERSION | jq -r '.config.Env[2]')

    eval "export $info"
    echo $IMAGE

    VAST_PIPE=$IMAGE
    VAST_PIPE=${VAST_PIPE##*-}  # chop the prefix, keep the pipe id

    scripts/run_jenkins_job_etcd_prio_queue.py \
      --base-queue-prefix=$JENKINS_QUEUE \
      --etcd-prefix=teams \
      --jenkins-job-name=single_test_from_pipeline \
      --jenkins-server=$JENKINS_SERVER \
      --jenkins-user=$JENKINS_USER \
      --jenkins-password=$JENKINS_PASSWORD  \
      --etcd-server=127.0.0.1 \
      --object-name=vast-csi-$CI_PIPELINE_ID \
      --blocking -- \
        pipeline=$VAST_PIPE \
        slash_params="--without-jira-test-report --skip-harvest --kwarg=csi_plugin_version=$CI_PIPELINE_ID" \
        slash_filter=test_csi_plugin \
        tests_source=remote
  tags:
    - regression-runner-light


test_csi:3.4.0:
  <<: *test_csi
  variables:
    VERSION: 3.4.0

test_csi:3.6.0:
  <<: *test_csi
  variables:
    VERSION: 3.6.0

test_csi:master:
  <<: *test_csi
  variables:
    VERSION: master

test_csi:manual:
  <<: *test_csi


update_dockerhub:
  stage: deploy
  script: |
    set -x
    VERSION=$(cat version.txt)
    RELEASE_NAME=docker.io/vastdataorg/csi:${VERSION}

    docker pull ${IMAGE_NAME}
    docker tag ${IMAGE_NAME} ${RELEASE_NAME}

    echo "Pushing:  ${IMAGE_NAME}  -->  ${RELEASE_NAME}"
    docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} $DOCKER_HUB
    docker push ${RELEASE_NAME}
    echo "pushed ${RELEASE_NAME}"

  after_script:
  - docker logout $DOCKER_HUB
  only:
  - master
  when: manual
  tags:
    - vast-dev-builder


update_github:
  image:
    name: alpine/git
    entrypoint: [""]
  stage: deploy
  script: |
    set -x
    VERSION=$(cat version.txt)

    mkdir ~/.ssh/
    cp $GITHUB_KEY ~/.ssh/id_rsa
    chmod 0600 ~/.ssh/id_rsa
    ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
    git config --global user.email "ofer.koren@vastdata.com"
    git config --global user.name "Ofer Koren"

    git remote -v
    git remote add github git@github.com:vast-data/vast-csi.git || true
    git fetch github public
    git checkout -B public FETCH_HEAD
    git checkout $CI_COMMIT_SHA -- .
    git commit -am "VAST Data CSI Plugin - $VERSION

      (from $CI_COMMIT_SHA)"

    git tag -f $VERSION
    git push -f --tags github HEAD:public

  only:
  - master
  when: manual
  tags:
    - vast-dev-builder
